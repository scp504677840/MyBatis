<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
    XML 配置文件（configuration XML）中包含了对 MyBatis 系统的核心设置，
    包含获取数据库连接实例的数据源（DataSource）和决定事务作用域和控制方式的事务管理器（TransactionManager）。
    注意：
    配置文件一定要按照以下顺序放置，否则会报错Caused by: org.xml.sax.SAXParseException; lineNumber: 46; columnNumber: 17; 元素类型为 "configuration" 的内容必须匹配 "(properties?...
    properties?,
    settings?,
    typeAliases?,
    typeHandlers?,
    objectFactory?,
    objectWrapperFactory?,
    reflectorFactory?,
    plugins?,
    environments?,
    databaseIdProvider?,
    mappers?
    -->

    <!-- 引入外部资源文件 -->
    <properties resource="db.properties"/>

    <settings>
        <!-- 开启全局二级缓存 -->
        <setting name="cacheEnabled" value="true"/>
        <!-- SESSION：默认值，启用一级缓存。STATEMENT：禁用一级缓存。 -->
        <!--<setting name="localCacheScope" value="SESSION"/>-->
        <!-- 设置驱动程序等待数据库响应的秒数 -->
        <setting name="defaultStatementTimeout" value="30"/>
        <!-- 启用从经典数据库列名A_COLUMN到驼峰式经典Java属性名称aColumn的自动映射 -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 允许JDBC支持生成的密钥。 需要兼容的驱动程序。如果设置为true，此设置会强制使用生成的键-->
        <setting name="useGeneratedKeys" value="true"/>
        <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 -->
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!-- DeBug -->
        <setting name="logImpl" value="STDOUT_LOGGING"/>
        <!-- 延迟加载 -->
        <!--<setting name="lazyLoadingEnabled" value="true"/>-->
        <!-- 当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载 -->
        <!--<setting name="aggressiveLazyLoading" value="false"/>-->
    </settings>

    <!-- 别名定义；不推荐使用，而推荐使用全类名。 -->
    <!--<typeAliases>
        <typeAlias type="main.entities.AccountInfo" alias="AccountInfo"/>
    </typeAliases>-->

    <!-- 类型处理器；很少使用到。 -->
    <!--<typeHandlers>
        <typeHandler handler="org.apache.ibatis.type.ByteTypeHandler" javaType="_byte"/>
    </typeHandlers>-->

    <!-- 插件：可以做拦截。 -->
    <!--<plugins>
        <plugin interceptor=""></plugin>
    </plugins>-->

    <!--
    environment 元素体中包含了事务管理和连接池的配置。
    default：可以切换环境。
    -->
    <environments default="development">

        <!-- 测试环境 -->
        <environment id="test">

            <!-- transactionManager：事务管理器 -->
            <transactionManager type="JDBC"/>

            <!--
            dataSource：数据源
            type：类型；POOLED：使用数据库连接池；UNPOOLED：不使用数据库连接池。JNDI
            -->
            <dataSource type="POOLED">
                <property name="username" value="${user}"/>
                <property name="password" value="${password}"/>
                <property name="url" value="${jdbcUrl}"/>
                <property name="driver" value="${driverClass}"/>
            </dataSource>
        </environment>

        <!-- 开发环境 -->
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="username" value="${user}"/>
                <property name="password" value="${password}"/>
                <property name="url" value="${jdbcUrl}"/>
                <property name="driver" value="${driverClass}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 数据库提供商，支持多数据库 -->
    <!--<databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
    </databaseIdProvider>-->

    <!--
    mappers 元素则是包含一组 mapper 映射器（这些 mapper 的 XML 文件包含了 SQL 代码和映射定义信息）。
    -->
    <mappers>
        <!-- 基于XML -->
        <mapper resource="main/mapper/AccountInfoMapper.xml"/>
        <!-- 基于注解 -->
        <!--<mapper class="main.mapper.AccountInfoMapperAnnotation"/>-->
    </mappers>

</configuration>